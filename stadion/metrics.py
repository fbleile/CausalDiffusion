import jax.numpy as jnpfrom scipy.stats import wasserstein_distancedef calculate_distances(dataset1, dataset2):    """    Calculates distances between two datasets:    - Mean Squared Error (MSE) of the means    - Wasserstein distance between the empirical distributions        Args:        dataset1 (jnp.ndarray): First dataset, shape (M, d)        dataset2 (jnp.ndarray): Second dataset, shape (N, d)            Returns:        dict: A dictionary containing:            - mse_means: Mean squared error of the means            - wasserstein_distance: Wasserstein distance between distributions    """    # Convert ijnputs to numpy arrays if they aren't already    dataset1 = jnp.array(dataset1)    dataset2 = jnp.array(dataset2)        dataset1 = jnp.nan_to_num(dataset1, nan=0.0, posinf=1e10, neginf=-1e10)    dataset2 = jnp.nan_to_num(dataset2, nan=0.0, posinf=1e10, neginf=-1e10)    # Calculate means for each dataset    mean1 = jnp.mean(dataset1, axis=0)    mean2 = jnp.mean(dataset2, axis=0)        print(mean1, mean2)        # Calculate MSE between means    mse_means = jnp.linalg.norm(mean1 - mean2)        # Calculate Wasserstein distance    # For multivariate data, we calculate the distance for each dimension    # and take the mean    wasserstein_distances = jnp.array([])    for dim in range(dataset1.shape[1]):        w_dist = wasserstein_distance(dataset1[:, dim], dataset2[:, dim])        wasserstein_distances = jnp.concatenate([wasserstein_distances, jnp.array([w_dist])])         avg_wasserstein = jnp.mean(wasserstein_distances)        return {        "mse_means": float(mse_means),        "wasserstein_distance": float(avg_wasserstein)    }def _validate_ijnputs(dataset1, dataset2):    """    Validates the ijnput datasets.        Args:        dataset1 (jnp.ndarray): First dataset        dataset2 (jnp.ndarray): Second dataset            Raises:        ValueError: If ijnputs are invalid    """    if dataset1.shape[1] != dataset2.shape[1]:        raise ValueError("Datasets must have the same number of features")        if len(dataset1.shape) != 2 or len(dataset2.shape) != 2:        raise ValueError("Datasets must be 2-dimensional arrays")